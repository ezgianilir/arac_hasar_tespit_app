import numpy as np
import pandas as pd
import tensorflow as tf
from tensorflow.keras.applications.vgg19 import VGG19
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Flatten
from tensorflow.keras.preprocessing.image import ImageDataGenerator

# Veri setinin bulunduğu dizini belirtin
#dataset_dir = "C:/Users/ezgi_/OneDrive/Masaüstü/vgg19"

# Veri setini yükleme
train_dir = "training"
test_dir = "validation"

# Görüntü boyutlarını ve diğer eğitim parametrelerini belirleme
image_size = (224, 224)
batch_size = 32
num_epochs = 10

# Veri artırma (data augmentation) yapma
train_datagen = ImageDataGenerator(
    rescale=1./255,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True
)

test_datagen = ImageDataGenerator(rescale=1./255)

# Eğitim veri setini yükleyin ve artırın
train_generator = train_datagen.flow_from_directory(
    train_dir,
    target_size=image_size,
    batch_size=batch_size,
    class_mode='binary'
)

# Test veri setini yükleyin
test_generator = test_datagen.flow_from_directory(
    test_dir,
    target_size=image_size,
    batch_size=batch_size,
    class_mode='binary'
)

# VGG19 modelini yaratma
base_model = VGG19(include_top=False, weights='imagenet', input_shape=(224, 224, 3))

model = Sequential()
model.add(base_model)
model.add(Flatten())
model.add(Dense(1, activation='sigmoid'))

# Modeli derleme
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

# Modeli eğitme
model.fit(
    train_generator,
    steps_per_epoch=train_generator.n // batch_size,
    epochs=num_epochs,
    validation_data=test_generator,
    validation_steps=test_generator.n // batch_size
)

# Doğruluk oranını hesaplama
_, accuracy = model.evaluate(test_generator)
print("Doğruluk Oranı: %.2f" % (accuracy * 100))